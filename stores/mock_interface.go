// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package stores is a generated GoMock package.
package stores

import (
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	models "example.com/customer-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomer is a mock of Customer interface.
type MockCustomer struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerMockRecorder
}

// MockCustomerMockRecorder is the mock recorder for MockCustomer.
type MockCustomerMockRecorder struct {
	mock *MockCustomer
}

// NewMockCustomer creates a new mock instance.
func NewMockCustomer(ctrl *gomock.Controller) *MockCustomer {
	mock := &MockCustomer{ctrl: ctrl}
	mock.recorder = &MockCustomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomer) EXPECT() *MockCustomerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomer) Create(ctx *gofr.Context, customer models.Customer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerMockRecorder) Create(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomer)(nil).Create), ctx, customer)
}

// Delete mocks base method.
func (m *MockCustomer) Delete(ctx *gofr.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomer)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCustomer) Get(ctx *gofr.Context, id string) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomer)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockCustomer) Update(ctx *gofr.Context, customer models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerMockRecorder) Update(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomer)(nil).Update), ctx, customer)
}
